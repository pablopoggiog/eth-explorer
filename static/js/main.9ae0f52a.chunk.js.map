{"version":3,"sources":["assets/banner.png","components/BlocksList/styles.ts","components/BlocksList/index.tsx","utils/index.ts","components/Block/styles.ts","components/Block/index.tsx","hooks/useBlockDate.ts","components/TransactionsList/styles.ts","components/TransactionsList/index.tsx","components/Transaction/styles.ts","components/Transaction/index.tsx","components/TransactionModal/styles.tsx","components/TransactionModal/index.tsx","assets/copy.svg","components/Field/index.tsx","components/Button/index.ts","components/Spinner/styles.ts","components/Spinner/index.tsx","App.tsx","constants/index.ts","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","BlocksList","blocks","userAddress","map","block","hash","getBigNumber","value","ethers","utils","formatEther","fadeIn","keyframes","Expanded","Collapsed","ExpandButtonContainer","ExpandButton","Label","h3","Input","input","CheckboxContainer","TimeAgo","Block","useState","expanded","setExpanded","onlyOwnTransactions","setOnlyOwnTransactions","timestamp","Date","currentTime","setCurrentTime","timeAgo","setTimeAgo","useEffect","timer","setInterval","clearInterval","time","result","Math","round","getTime","console","log","getBlockDate","useBlockDate","transactionsSendingETH","transactions","filter","transaction","Number","ownTransactions","from","to","text","String","number","type","onClick","defaultChecked","TransactionsList","length","Transaction","modalOpen","setModalOpen","toggleModal","isOpen","onClose","Background","CloseButton","TransactionModal","blockNumber","Field","inputRef","useRef","FieldContainer","FieldBase","readOnly","ref","Button","refEl","select","document","execCommand","error","copyToClipboard","current","Icon","src","copyIcon","img","button","borderRadius","disabled","theme","toggleBorder","background","spin","Loader","inner","innest","Spinner","App","latestBlocks","setLatestBlocks","provider","setProvider","setUserAddress","getLatestBlocks","useCallback","a","getBlockNumber","latestBlockNumber","currentBlock","getBlockWithTransactions","newBlock","push","subscribeToNewBlocks","on","includes","slice","connectWithProvider","window","ethereum","providers","WebSocketProvider","connectWallet","request","method","accounts","HeaderContainer","Image","banner","Text","Body","h1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ae0f52a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/banner.be8a9f49.png\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { BlockWithTransactions } from \"@ethersproject/abstract-provider\";\r\nimport { Container } from \"./styles\";\r\nimport { Block } from \"src/components\";\r\n\r\ninterface BlocksListProps {\r\n  blocks: BlockWithTransactions[];\r\n  userAddress: string;\r\n}\r\n\r\nexport const BlocksList: FunctionComponent<BlocksListProps> = ({\r\n  blocks,\r\n  userAddress,\r\n}) => (\r\n  <Container>\r\n    {blocks.map((block) => (\r\n      <Block key={block.hash} block={block} userAddress={userAddress} />\r\n    ))}\r\n  </Container>\r\n);\r\n","import { ethers } from \"ethers\";\r\n\r\nexport const getBigNumber = (value: ethers.BigNumber) =>\r\n  ethers.utils.formatEther(value);\r\n\r\nexport const copyToClipboard = (refEl: HTMLInputElement | null): void => {\r\n  try {\r\n    refEl?.select();\r\n    document.execCommand(\"copy\");\r\n  } catch (error) {\r\n    console.error({ error });\r\n  }\r\n};\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst fadeIn = keyframes`\r\n        0% {\r\n          opacity: 0;\r\n        }\r\n\r\n        100% {\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 1em;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  width: 70vw;\r\n  margin: 1em 0;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  animation: ${fadeIn} 1.5s ease 1;\r\n`;\r\n\r\nexport const Expanded = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  padding: 1em;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n`;\r\n\r\nexport const Collapsed = styled.div`\r\n  padding: 1em;\r\n  transition: 0.5s;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  gap: 2em;\r\n`;\r\n\r\nexport const ExpandButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  height: 3.5em;\r\n`;\r\n\r\nexport const ExpandButton = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 1.5em;\r\n  padding: 1em;\r\n  cursor: pointer;\r\n  display: flex;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n`;\r\n\r\nexport const Label = styled.h3``;\r\n\r\nexport const Field = styled.div``;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const CheckboxContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1em;\r\n`;\r\n\r\nexport const TimeAgo = styled.div`\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  padding: 0.8em;\r\n  border-radius: 10px;\r\n  font-size: 0.8em;\r\n`;\r\n","import { FunctionComponent, useState } from \"react\";\r\nimport { BlockWithTransactions } from \"@ethersproject/abstract-provider\";\r\nimport { TransactionsList, Field } from \"src/components\";\r\nimport { getBigNumber } from \"src/utils\";\r\nimport { useBlockDate } from \"src/hooks\";\r\nimport {\r\n  Collapsed,\r\n  Container,\r\n  Expanded,\r\n  Label,\r\n  ExpandButtonContainer,\r\n  ExpandButton,\r\n  Input,\r\n  CheckboxContainer,\r\n  TimeAgo,\r\n} from \"./styles\";\r\n\r\ninterface BlockProps {\r\n  block: BlockWithTransactions;\r\n  userAddress: string;\r\n}\r\n\r\nexport const Block: FunctionComponent<BlockProps> = ({\r\n  block,\r\n  userAddress,\r\n}) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const [onlyOwnTransactions, setOnlyOwnTransactions] =\r\n    useState<boolean>(false);\r\n\r\n  const { timeAgo, getBlockDate } = useBlockDate(block.timestamp);\r\n\r\n  const toggle = () => setExpanded(!expanded);\r\n\r\n  const transactionsSendingETH = block.transactions.filter(\r\n    (transaction) => Number(getBigNumber(transaction.value)) !== 0\r\n  );\r\n\r\n  const ownTransactions = transactionsSendingETH.filter(\r\n    (transaction) =>\r\n      transaction.from === userAddress || transaction.to === userAddress\r\n  );\r\n\r\n  const toggleOwnTransactions = () =>\r\n    setOnlyOwnTransactions(!onlyOwnTransactions);\r\n\r\n  return (\r\n    <Container>\r\n      {expanded ? (\r\n        <Expanded>\r\n          <Label>Hash:</Label>\r\n          <Field text={block.hash} />\r\n          <Label>Number:</Label>\r\n          <Field text={String(block.number)} />\r\n          <Label>Timestamp:</Label>\r\n          <Field text={String(getBlockDate())} />\r\n          <CheckboxContainer>\r\n            <Label>Only transactions from/to me?</Label>\r\n            <Input\r\n              type=\"checkbox\"\r\n              onClick={toggleOwnTransactions}\r\n              defaultChecked={onlyOwnTransactions}\r\n            />\r\n          </CheckboxContainer>\r\n          <TransactionsList\r\n            transactions={\r\n              onlyOwnTransactions ? ownTransactions : transactionsSendingETH\r\n            }\r\n          />\r\n        </Expanded>\r\n      ) : (\r\n        <Collapsed>\r\n          <span>{block.hash}</span>\r\n          <TimeAgo> {timeAgo} seconds ago</TimeAgo>\r\n        </Collapsed>\r\n      )}\r\n\r\n      <ExpandButtonContainer>\r\n        <ExpandButton onClick={toggle}>{expanded ? \"↑\" : \"↓\"}</ExpandButton>\r\n      </ExpandButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useBlockDate = (timestamp: number) => {\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [timeAgo, setTimeAgo] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const time = new Date(timestamp * 1000);\r\n    const result = Math.round((currentTime.getTime() - time.getTime()) / 1000);\r\n    console.log({ timestamp, time, timeAgo });\r\n    setTimeAgo(result);\r\n  }, [timeAgo, timestamp, currentTime]);\r\n\r\n  const getBlockDate = () => {\r\n    const date = new Date(timestamp * 1000);\r\n\r\n    return date;\r\n  };\r\n\r\n  return {\r\n    timeAgo,\r\n    getBlockDate,\r\n  };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div``;\r\n","import { FunctionComponent } from \"react\";\r\nimport { TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { Container } from \"./styles\";\r\nimport { Transaction } from \"src/components\";\r\n\r\ninterface TransactionsListProps {\r\n  transactions: TransactionResponse[];\r\n}\r\n\r\nexport const TransactionsList: FunctionComponent<TransactionsListProps> = ({\r\n  transactions,\r\n}) => (\r\n  <Container>\r\n    <h3>Transactions:</h3>\r\n    <h5>(only {transactions.length} sending ETH)</h5>\r\n    {transactions.map((transaction) => (\r\n      <Transaction key={transaction.hash} transaction={transaction} />\r\n    ))}\r\n  </Container>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 1em 0;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n\r\n  &:hover {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n  }\r\n`;\r\n","import { FunctionComponent, useState } from \"react\";\r\nimport { TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { TransactionModal } from \"src/components\";\r\nimport { Container } from \"./styles\";\r\n\r\ninterface TransactionProps {\r\n  transaction: TransactionResponse;\r\n}\r\n\r\nexport const Transaction: FunctionComponent<TransactionProps> = ({\r\n  transaction,\r\n}) => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n\r\n  const toggleModal = () => setModalOpen(!modalOpen);\r\n\r\n  return (\r\n    <>\r\n      <Container onClick={toggleModal}>{transaction.hash}</Container>\r\n      <TransactionModal\r\n        isOpen={modalOpen}\r\n        onClose={toggleModal}\r\n        transaction={transaction}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ninterface BackgroundProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nexport const Background = styled.div<BackgroundProps>`\r\n  background: rgba(0, 0, 0, 0.86);\r\n  position: fixed;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 90;\r\n  display: ${({ isOpen }) => (isOpen ? \"flex\" : \"none\")};\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #282c34;\r\n  color: white;\r\n  border-radius: 10px;\r\n  width: 80%;\r\n  max-width: 500px;\r\n  padding: 1em 1.4em;\r\n`;\r\n\r\nexport const CloseButton = styled.div`\r\n  align-self: flex-end;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nexport const Transaction = styled.div`\r\n  padding: 1em;\r\n`;\r\n\r\nexport const Label = styled.h3``;\r\n","import { FunctionComponent } from \"react\";\r\nimport { TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { Field } from \"src/components\";\r\nimport { getBigNumber } from \"src/utils\";\r\nimport {\r\n  Background,\r\n  CloseButton,\r\n  Container,\r\n  Transaction,\r\n  Label,\r\n} from \"./styles\";\r\n\r\ninterface TransactionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  transaction: TransactionResponse;\r\n}\r\n\r\nexport const TransactionModal: FunctionComponent<TransactionModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  transaction,\r\n}) => {\r\n  return (\r\n    <Background isOpen={isOpen}>\r\n      <Container>\r\n        <CloseButton onClick={onClose}>x</CloseButton>\r\n        <Transaction>\r\n          <Label>Hash:</Label>\r\n          <Field text={transaction.hash} />\r\n          <Label>Block Number:</Label>\r\n          <Field text={String(transaction.blockNumber)} />\r\n          <Label>From:</Label>\r\n          <Field text={transaction.from} />\r\n          {transaction.to && (\r\n            <>\r\n              {\" \"}\r\n              <Label>To:</Label>\r\n              <Field text={transaction.to} />\r\n            </>\r\n          )}\r\n          <Label>ETH Sent:</Label>\r\n          <Field text={getBigNumber(transaction.value)} />\r\n        </Transaction>\r\n      </Container>\r\n    </Background>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/copy.0683a556.svg\";","import { FunctionComponent, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"src/components\";\r\nimport { copyToClipboard } from \"src/utils\";\r\nimport copyIcon from \"src/assets/copy.svg\";\r\n\r\ninterface FieldProps {\r\n  text: string;\r\n}\r\n\r\nexport const Field: FunctionComponent<FieldProps> = ({ text }) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleCopyToClipboard = () => copyToClipboard(inputRef.current);\r\n\r\n  return (\r\n    <FieldContainer>\r\n      <FieldBase readOnly ref={inputRef} value={text} />\r\n      <Button onClick={handleCopyToClipboard}>\r\n        <Icon src={copyIcon} />\r\n      </Button>\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport const FieldContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  gap: 1em;\r\n  border: 1px solid white;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const FieldBase = styled.input`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  background: transparent;\r\n  border: none;\r\n  color: white;\r\n  width: 80%;\r\n\r\n  &:focus {\r\n    text-decoration: none;\r\n    outline: none;\r\n    cursor: auto;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.img`\r\n  width: 1em;\r\n  height: 1em;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  borderRadius?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border-radius: ${({ borderRadius }) => borderRadius ?? \"5px\"};\r\n  padding: 0.4em;\r\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\r\n  transition: 0.6s;\r\n  text-align: center;\r\n  justify-content: center;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  background: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 1em 0;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    color: white;\r\n    transform: scale(1.01);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 8x solid lightBlue;\r\n  border-top: 8px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"40px\" : innest ? \"10px\" : \"65px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"33px\" : innest ? \"7px\" : \"60px\"};\r\n  animation: ${spin} 1.5s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Loader } from \"./styles\";\r\n\r\nexport const Spinner: FunctionComponent = () => (\r\n  <Loader>\r\n    <Loader inner>\r\n      <Loader innest />\r\n    </Loader>\r\n  </Loader>\r\n);\r\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { BlockWithTransactions } from \"@ethersproject/abstract-provider\";\nimport styled from \"styled-components\";\nimport banner from \"src/assets/banner.png\";\nimport { BlocksList, Spinner } from \"./components\";\nimport {\n  INFURA_WEBSOCKETS_URL,\n  INFURA_PROJECT_ID,\n  INFURA_NETWORK,\n} from \"./constants\";\n\ntype WebSocketProvider = ethers.providers.WebSocketProvider;\n\nconst App = () => {\n  const [latestBlocks, setLatestBlocks] = useState<BlockWithTransactions[]>([]);\n  const [provider, setProvider] = useState<WebSocketProvider | null>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n\n  const getLatestBlocks = useCallback(async () => {\n    try {\n      if (provider) {\n        const latestBlockNumber = await provider.getBlockNumber();\n\n        const blocks = [];\n\n        for (\n          let currentBlock = latestBlockNumber;\n          blocks.length < 10;\n          currentBlock--\n        ) {\n          const newBlock = await provider.getBlockWithTransactions(\n            currentBlock\n          );\n\n          blocks.push(newBlock);\n        }\n\n        setLatestBlocks(blocks);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [provider]);\n\n  const subscribeToNewBlocks = useCallback(async () => {\n    if (provider && latestBlocks.length) {\n      provider.on(\"block\", async (blockNumber) => {\n        const newBlock = await provider.getBlockWithTransactions(blockNumber);\n\n        // Update the blocks leaving in first place the new block, followed by the rest of pre-existing blocks and removing the oldest one.\n        setLatestBlocks((blocks) => {\n          // I've been testing for a while and there seems to be an issue with this subscription, from time to time it receives\n          // an event for the same block twice, duplicating the block in the list.\n          // Usually I'd have this validation outside of the setState, but if I used directly latestBlocks (outside of setLatestBlocks) I'd have to include\n          // it as dependency of the useCallback, causing subscribeToNewBlocks to be re-created and re-run in its useEffect every time a new block is added.\n          const existingNumbers = blocks.map((block) => block.number);\n\n          if (!existingNumbers.includes(blockNumber))\n            return [newBlock, ...blocks.slice(0, -1)];\n          else return [...blocks];\n        });\n      });\n    }\n  }, [provider, latestBlocks.length]);\n\n  const connectWithProvider = useCallback(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      setProvider(\n        new ethers.providers.WebSocketProvider(\n          `${INFURA_WEBSOCKETS_URL}${INFURA_PROJECT_ID}`,\n          INFURA_NETWORK\n        )\n      );\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  }, []);\n\n  const connectWallet = useCallback(async () => {\n    try {\n      const { ethereum } = window;\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      setUserAddress(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  useEffect(() => {\n    connectWallet();\n  }, [connectWallet]);\n\n  useEffect(() => {\n    connectWithProvider();\n  }, [connectWithProvider]);\n\n  // Fetch the initial 10 blocks, only if there's already a provider connected (verified internally)\n  useEffect(() => {\n    getLatestBlocks();\n  }, [getLatestBlocks]);\n\n  // Listen to new blocks, to update the list each time a new block is mined\n  useEffect(() => {\n    subscribeToNewBlocks();\n  }, [subscribeToNewBlocks]);\n\n  return (\n    <Container>\n      <HeaderContainer>\n        <Image src={banner} />\n        <Text>Eth Explorer</Text>\n      </HeaderContainer>\n      <Body>\n        {latestBlocks.length ? (\n          <BlocksList blocks={latestBlocks} userAddress={userAddress} />\n        ) : (\n          <Spinner />\n        )}\n      </Body>\n    </Container>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst HeaderContainer = styled.div`\n  margin: 3em 0;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  height: 200px;\n`;\n\nconst Image = styled.img`\n  height: 100%;\n  position: absolute;\n  z-index: 0;\n`;\n\nconst Text = styled.h1`\n  text-shadow: 1px 1px 5px white;\n  text-align: center;\n  z-index: 1;\n  position: absolute;\n  margin-top: 1.68em;\n  width: 10em;\n  font-size: 1.8em;\n`;\n\nconst Body = styled.div`\n  margin-top: 20em;\n`;\n","export const INFURA_WEBSOCKETS_URL = \"wss://mainnet.infura.io/ws/v3/\";\r\nexport const INFURA_PROJECT_ID = \"ed948b163f0842cf86b3e1908a05f376\";\r\nexport const INFURA_NETWORK = \"mainnet\";\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}