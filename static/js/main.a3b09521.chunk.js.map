{"version":3,"sources":["contexts/EthereumContext.tsx","constants/index.ts","assets/banner.png","hooks/useEthereum.ts","components/BlocksList/styles.ts","components/BlocksList/index.tsx","utils/index.ts","components/Block/styles.ts","components/Block/index.tsx","hooks/useBlockDate.ts","components/TransactionsList/styles.ts","components/TransactionsList/index.tsx","components/Transaction/styles.ts","components/Transaction/index.tsx","assets/close.png","components/TransactionModal/styles.tsx","components/TransactionModal/index.tsx","assets/copy.svg","components/Field/index.tsx","components/Button/index.ts","components/Spinner/styles.ts","components/Spinner/index.tsx","styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EthereumContext","createContext","EthereumContextProvider","children","useState","latestBlocks","setLatestBlocks","provider","setProvider","userAddress","setUserAddress","alert","useAlert","getLatestBlocks","useCallback","a","getBlockNumber","latestBlockNumber","blocks","currentBlock","length","getBlockWithTransactions","newBlock","push","console","log","subscribeToNewBlocks","on","blockNumber","map","block","number","includes","slice","error","connectWithProvider","window","ethereum","ethers","providers","WebSocketProvider","installMetamaskMessage","style","color","target","rel","href","show","connectWallet","request","method","accounts","useEffect","Provider","value","useEthereum","useContext","Container","styled","div","BlocksList","hash","getBigNumber","utils","formatEther","fadeIn","keyframes","Expanded","Collapsed","ExpandButtonContainer","ExpandButton","Label","h3","Input","input","CheckboxContainer","TimeAgo","Hash","span","Block","expanded","setExpanded","onlyOwnTransactions","setOnlyOwnTransactions","timestamp","Date","currentTime","setCurrentTime","timeAgo","setTimeAgo","timer","setInterval","clearInterval","time","result","Math","round","getTime","getBlockDate","useBlockDate","transactionsSendingETH","transactions","filter","transaction","Number","ownTransactions","from","to","label","text","String","miner","type","onClick","defaultChecked","TransactionsList","Transaction","modalOpen","setModalOpen","toggleModal","isOpen","onClose","Background","CloseButton","img","TransactionModal","src","closeIcon","Field","inputRef","useRef","htmlFor","InputContainer","id","readOnly","ref","Button","refEl","callback","select","document","execCommand","copyToClipboard","current","Icon","copyIcon","button","borderRadius","disabled","theme","toggleBorder","background","spin","Loader","inner","innest","Spinner","HeaderContainer","Image","Text","h1","Body","App","banner","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","alertOptions","timeout","position","positions","BOTTOM_CENTER","render","StrictMode","template","AlertTemplate","getElementById"],"mappings":"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","file":"static/js/main.a3b09521.chunk.js","sourcesContent":["import {\r\n  FunctionComponent,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  createContext,\r\n} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useAlert } from \"react-alert\";\r\nimport {\r\n  INFURA_WEBSOCKETS_URL,\r\n  INFURA_PROJECT_ID,\r\n  INFURA_NETWORK,\r\n} from \"src/constants\";\r\nimport { EthereumContextReturn, Block, WebSocketProvider } from \"src/types\";\r\n\r\nexport const EthereumContext = createContext<EthereumContextReturn>(\r\n  {} as EthereumContextReturn\r\n);\r\n\r\nexport const EthereumContextProvider: FunctionComponent = ({ children }) => {\r\n  const [latestBlocks, setLatestBlocks] = useState<Block[]>([]);\r\n  const [provider, setProvider] = useState<WebSocketProvider | null>(null);\r\n  const [userAddress, setUserAddress] = useState<string>(\"\");\r\n\r\n  const alert = useAlert();\r\n\r\n  const getLatestBlocks = useCallback(async () => {\r\n    try {\r\n      if (provider) {\r\n        const latestBlockNumber = await provider.getBlockNumber();\r\n\r\n        const blocks = [];\r\n\r\n        for (\r\n          let currentBlock = latestBlockNumber;\r\n          blocks.length < 10;\r\n          currentBlock--\r\n        ) {\r\n          const newBlock = await provider.getBlockWithTransactions(\r\n            currentBlock\r\n          );\r\n\r\n          blocks.push(newBlock);\r\n        }\r\n\r\n        setLatestBlocks(blocks);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [provider]);\r\n\r\n  const subscribeToNewBlocks = useCallback(async () => {\r\n    try {\r\n      if (provider && latestBlocks.length) {\r\n        provider.on(\"block\", async (blockNumber) => {\r\n          const newBlock = await provider.getBlockWithTransactions(blockNumber);\r\n\r\n          // Update the blocks leaving in first place the new block, followed by the rest of pre-existing blocks and removing the oldest one.\r\n          setLatestBlocks((blocks) => {\r\n            // I've been testing for a while and there seems to be an issue with this subscription, from time to time it receives\r\n            // an event for the same block twice, duplicating the block in the list.\r\n            // Usually I'd have this validation outside of the setState, but if I used directly latestBlocks (outside of setLatestBlocks) I'd have to include\r\n            // it as dependency of the useCallback, causing subscribeToNewBlocks to be re-created and re-run in its useEffect every time a new block is added.\r\n            //  My 2 options were: 1. Ignoring depdendencies, going against a React's principle, or\r\n            // 2. Putting logic inside the setState (setLatestBlocks), that looks horrible to me but I don't remember to have read anything against it.\r\n            // Happy to know a better solution (and there might be plenty more than 1) if someone finds it!\r\n            const existingNumbers = blocks.map((block) => block.number);\r\n\r\n            if (!existingNumbers.includes(blockNumber))\r\n              return [newBlock, ...blocks.slice(0, -1)];\r\n            else return [...blocks];\r\n          });\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [provider, latestBlocks.length]);\r\n\r\n  const connectWithProvider = useCallback(() => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        setProvider(\r\n          new ethers.providers.WebSocketProvider(\r\n            `${INFURA_WEBSOCKETS_URL}${INFURA_PROJECT_ID}`,\r\n            INFURA_NETWORK\r\n          )\r\n        );\r\n      } else {\r\n        const installMetamaskMessage = (\r\n          <>\r\n            <span>Install Metamask</span>{\" \"}\r\n            <a\r\n              style={{ color: \"white\" }}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              href=\"https://metamask.io/download.html\"\r\n            >\r\n              here\r\n            </a>\r\n            !\r\n          </>\r\n        );\r\n\r\n        alert.show(installMetamaskMessage);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [alert]);\r\n\r\n  const connectWallet = useCallback(async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      setUserAddress(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    connectWallet();\r\n  }, [connectWallet]);\r\n\r\n  useEffect(() => {\r\n    connectWithProvider();\r\n  }, [connectWithProvider]);\r\n\r\n  // Fetch the initial 10 blocks, only if there's already a provider connected (verified internally)\r\n  useEffect(() => {\r\n    getLatestBlocks();\r\n  }, [getLatestBlocks]);\r\n\r\n  // Listen to new blocks, to update the list each time a new block is mined\r\n  useEffect(() => {\r\n    subscribeToNewBlocks();\r\n  }, [subscribeToNewBlocks]);\r\n\r\n  return (\r\n    <EthereumContext.Provider value={{ latestBlocks, userAddress }}>\r\n      {children}\r\n    </EthereumContext.Provider>\r\n  );\r\n};\r\n","export const INFURA_WEBSOCKETS_URL = \"wss://mainnet.infura.io/ws/v3/\";\r\nexport const INFURA_PROJECT_ID = \"ed948b163f0842cf86b3e1908a05f376\";\r\nexport const INFURA_NETWORK = \"mainnet\";\r\n","export default __webpack_public_path__ + \"static/media/banner.be8a9f49.png\";","import { useContext } from \"react\";\r\nimport { EthereumContext } from \"src/contexts\";\r\nimport { EthereumContextReturn } from \"src/types\";\r\n\r\nexport const useEthereum = (): EthereumContextReturn =>\r\n  useContext(EthereumContext);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Block as BlockInterface } from \"src/types\";\r\nimport { Container } from \"./styles\";\r\nimport { Block } from \"src/components\";\r\n\r\ninterface BlocksListProps {\r\n  blocks: BlockInterface[];\r\n}\r\n\r\nexport const BlocksList: FunctionComponent<BlocksListProps> = ({ blocks }) => (\r\n  <Container>\r\n    {blocks.map((block) => (\r\n      <Block key={block.hash} block={block} />\r\n    ))}\r\n  </Container>\r\n);\r\n","import { ethers } from \"ethers\";\r\n\r\nexport const getBigNumber = (value: ethers.BigNumber) =>\r\n  ethers.utils.formatEther(value);\r\n\r\nexport const copyToClipboard = (\r\n  refEl: HTMLInputElement | null,\r\n  callback: (message: string) => void\r\n): void => {\r\n  try {\r\n    refEl?.select();\r\n    document.execCommand(\"copy\");\r\n\r\n    callback(\"Copied\");\r\n  } catch (error) {\r\n    console.error({ error });\r\n    if (typeof error === \"string\") callback(error);\r\n    else callback(\"There was an error trying to copy\");\r\n  }\r\n};\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst fadeIn = keyframes`\r\n        0% {\r\n          opacity: 0;\r\n          transform: scale(0.90);\r\n          transform-origin: top right;\r\n        }\r\n\r\n        100% {\r\n          opacity: 1;\r\n          transform: scale(1);\r\n          transform-origin: center;\r\n        }\r\n      `;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 1em;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  margin: 1em 0;\r\n  animation: ${fadeIn} 1.5s ease 1;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const Expanded = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  padding: 2em;\r\n  width: 70vw;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  animation: ${fadeIn} 0.3s ease 1;\r\n  gap: 2em;\r\n\r\n  @media (max-width: 600px) {\r\n    padding: 1em;\r\n  }\r\n`;\r\n\r\nexport const Collapsed = styled.div`\r\n  padding: 1em;\r\n  width: 70vw;\r\n  transition: 0.5s;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  gap: 2em;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const ExpandButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  height: 3.5em;\r\n`;\r\n\r\nexport const ExpandButton = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 1.5em;\r\n  padding: 1em;\r\n  cursor: pointer;\r\n  display: flex;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n`;\r\n\r\nexport const Label = styled.h3``;\r\n\r\nexport const Field = styled.div``;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const CheckboxContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1em;\r\n`;\r\n\r\nexport const TimeAgo = styled.div`\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  padding: 0.8em;\r\n  border-radius: 10px;\r\n  font-size: 0.8em;\r\n`;\r\n\r\nexport const Hash = styled.span`\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n`;\r\n","import { FunctionComponent, useState } from \"react\";\r\nimport { TransactionsList, Field } from \"src/components\";\r\nimport { getBigNumber } from \"src/utils\";\r\nimport { Block as BlockInterface } from \"src/types\";\r\nimport { useBlockDate, useEthereum } from \"src/hooks\";\r\nimport {\r\n  Collapsed,\r\n  Container,\r\n  Expanded,\r\n  Label,\r\n  ExpandButtonContainer,\r\n  ExpandButton,\r\n  Input,\r\n  CheckboxContainer,\r\n  TimeAgo,\r\n  Hash,\r\n} from \"./styles\";\r\n\r\ninterface BlockProps {\r\n  block: BlockInterface;\r\n}\r\n\r\nexport const Block: FunctionComponent<BlockProps> = ({ block }) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const [onlyOwnTransactions, setOnlyOwnTransactions] =\r\n    useState<boolean>(false);\r\n\r\n  const { timeAgo, getBlockDate } = useBlockDate(block.timestamp);\r\n  const { userAddress } = useEthereum();\r\n\r\n  const toggle = () => setExpanded(!expanded);\r\n\r\n  const transactionsSendingETH = block.transactions.filter(\r\n    (transaction) => Number(getBigNumber(transaction.value)) !== 0\r\n  );\r\n\r\n  const ownTransactions = transactionsSendingETH.filter(\r\n    (transaction) =>\r\n      transaction.from === userAddress || transaction.to === userAddress\r\n  );\r\n\r\n  const toggleOwnTransactions = () =>\r\n    setOnlyOwnTransactions(!onlyOwnTransactions);\r\n\r\n  return (\r\n    <Container>\r\n      {expanded ? (\r\n        <Expanded>\r\n          <Field label=\"Hash:\" text={block.hash} />\r\n          <Field label=\"Number:\" text={String(block.number)} />\r\n          <Field label=\"Miner:\" text={block.miner} />\r\n          <Field label=\"Timestamp:\" text={String(getBlockDate())} />\r\n          <CheckboxContainer>\r\n            <Label>Only transactions from/to me?</Label>\r\n            <Input\r\n              type=\"checkbox\"\r\n              onClick={toggleOwnTransactions}\r\n              defaultChecked={onlyOwnTransactions}\r\n            />\r\n          </CheckboxContainer>\r\n          <TransactionsList\r\n            transactions={\r\n              onlyOwnTransactions ? ownTransactions : transactionsSendingETH\r\n            }\r\n          />\r\n        </Expanded>\r\n      ) : (\r\n        <Collapsed>\r\n          <Hash>{block.hash}</Hash>\r\n          <TimeAgo> {timeAgo} seconds ago</TimeAgo>\r\n        </Collapsed>\r\n      )}\r\n\r\n      <ExpandButtonContainer>\r\n        <ExpandButton onClick={toggle}>{expanded ? \"↑\" : \"↓\"}</ExpandButton>\r\n      </ExpandButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useBlockDate = (timestamp: number) => {\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [timeAgo, setTimeAgo] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const time = new Date(timestamp * 1000);\r\n    const result = Math.round((currentTime.getTime() - time.getTime()) / 1000);\r\n    setTimeAgo(result);\r\n  }, [timeAgo, timestamp, currentTime]);\r\n\r\n  const getBlockDate = () => {\r\n    const date = new Date(timestamp * 1000);\r\n\r\n    return date;\r\n  };\r\n\r\n  return {\r\n    timeAgo,\r\n    getBlockDate,\r\n  };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div``;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Transaction as TransactionInterface } from \"src/types\";\r\nimport { Container } from \"./styles\";\r\nimport { Transaction } from \"src/components\";\r\n\r\ninterface TransactionsListProps {\r\n  transactions: TransactionInterface[];\r\n}\r\n\r\nexport const TransactionsList: FunctionComponent<TransactionsListProps> = ({\r\n  transactions,\r\n}) => (\r\n  <Container>\r\n    <h3>Transactions:</h3>\r\n    <h5>(only {transactions.length} sending ETH)</h5>\r\n    {transactions.map((transaction) => (\r\n      <Transaction key={transaction.hash} transaction={transaction} />\r\n    ))}\r\n  </Container>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 1em 0;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n\r\n  &:hover {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n  }\r\n`;\r\n","import { FunctionComponent, useState } from \"react\";\r\nimport { Transaction as TransactionInterface } from \"src/types\";\r\nimport { TransactionModal } from \"src/components\";\r\nimport { Container } from \"./styles\";\r\n\r\ninterface TransactionProps {\r\n  transaction: TransactionInterface;\r\n}\r\n\r\nexport const Transaction: FunctionComponent<TransactionProps> = ({\r\n  transaction,\r\n}) => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n\r\n  const toggleModal = () => setModalOpen(!modalOpen);\r\n\r\n  return (\r\n    <>\r\n      <Container onClick={toggleModal}>{transaction.hash}</Container>\r\n      <TransactionModal\r\n        isOpen={modalOpen}\r\n        onClose={toggleModal}\r\n        transaction={transaction}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/close.0c6296a1.png\";","import styled, { keyframes } from \"styled-components\";\r\n\r\ninterface BackgroundProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst fadeIn = keyframes`\r\n        0% {\r\n          opacity: 0;\r\n          transform: scale(0.90);\r\n        }\r\n        100% {\r\n          opacity: 1;\r\n          transform: scale(1);\r\n        }\r\n      `;\r\n\r\nexport const Background = styled.div<BackgroundProps>`\r\n  background: rgba(0, 0, 0, 0.86);\r\n  position: fixed;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n  z-index: 90;\r\n  display: ${({ isOpen }) => (isOpen ? \"flex\" : \"none\")};\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #282c34;\r\n  color: white;\r\n  border-radius: 10px;\r\n  width: 80%;\r\n  max-width: 500px;\r\n  padding: 1em 1.4em;\r\n  animation: ${fadeIn} 0.3s ease 1;\r\n`;\r\n\r\nexport const CloseButton = styled.img`\r\n  align-self: flex-end;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n  width: 3.5em;\r\n\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nexport const Transaction = styled.div`\r\n  padding: 1em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1em;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Transaction as TransactionInterface } from \"src/types\";\r\nimport { Field } from \"src/components\";\r\nimport closeIcon from \"src/assets/close.png\";\r\nimport { getBigNumber } from \"src/utils\";\r\nimport { Background, CloseButton, Container, Transaction } from \"./styles\";\r\n\r\ninterface TransactionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  transaction: TransactionInterface;\r\n}\r\n\r\nexport const TransactionModal: FunctionComponent<TransactionModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  transaction,\r\n}) => {\r\n  return (\r\n    <Background isOpen={isOpen}>\r\n      <Container>\r\n        <CloseButton src={closeIcon} onClick={onClose} />\r\n        <Transaction>\r\n          <Field label=\"Hash:\" text={transaction.hash} />\r\n          <Field label=\"Block Number:\" text={String(transaction.blockNumber)} />\r\n          <Field label=\"From:\" text={transaction.from} />\r\n          {transaction.to && (\r\n            <>\r\n              {\" \"}\r\n              <Field label=\"To:\" text={transaction.to} />\r\n            </>\r\n          )}\r\n          <Field label=\"ETH Sent:\" text={getBigNumber(transaction.value)} />\r\n        </Transaction>\r\n      </Container>\r\n    </Background>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/copy.0683a556.svg\";","import { FunctionComponent, useRef } from \"react\";\r\nimport { useAlert } from \"react-alert\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"src/components\";\r\nimport { copyToClipboard } from \"src/utils\";\r\nimport copyIcon from \"src/assets/copy.svg\";\r\n\r\ninterface FieldProps {\r\n  label: string;\r\n  text: string;\r\n}\r\n\r\nexport const Field: FunctionComponent<FieldProps> = ({ label, text }) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const alert = useAlert();\r\n\r\n  const handleCopyToClipboard = () =>\r\n    copyToClipboard(inputRef.current, alert.show);\r\n\r\n  return (\r\n    <Container>\r\n      <Label htmlFor={label}>{label}</Label>\r\n      <InputContainer>\r\n        <Input id={label} readOnly ref={inputRef} value={text} />\r\n        <Button onClick={handleCopyToClipboard}>\r\n          <Icon src={copyIcon} />\r\n        </Button>\r\n      </InputContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.4em;\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  gap: 1em;\r\n  border: 1px solid white;\r\n  border-radius: 10px;\r\n  padding: 0 1em;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  background: transparent;\r\n  border: none;\r\n  color: white;\r\n  width: 80%;\r\n\r\n  &:focus {\r\n    text-decoration: none;\r\n    outline: none;\r\n    cursor: auto;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.img`\r\n  width: 1em;\r\n  height: 1em;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  font-size: 1.1em;\r\n  font-weight: 500;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  borderRadius?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border-radius: ${({ borderRadius }) => borderRadius ?? \"5px\"};\r\n  padding: 0.4em;\r\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\r\n  transition: 0.6s;\r\n  text-align: center;\r\n  justify-content: center;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  background: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 1em 0;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    color: white;\r\n    transform: scale(1.01);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 8x solid lightBlue;\r\n  border-top: 8px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"40px\" : innest ? \"10px\" : \"65px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"33px\" : innest ? \"7px\" : \"60px\"};\r\n  animation: ${spin} 1.5s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Loader } from \"./styles\";\r\n\r\nexport const Spinner: FunctionComponent = () => (\r\n  <Loader>\r\n    <Loader inner>\r\n      <Loader innest />\r\n    </Loader>\r\n  </Loader>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  min-height: 100vh;\r\n  background-color: #282c34;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  @media (max-width: 600px) {\r\n    font-size: 0.85rem;\r\n  }\r\n`;\r\n\r\nexport const HeaderContainer = styled.div`\r\n  margin: 3em 0;\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  top: 0;\r\n  height: 200px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  height: 100%;\r\n  position: absolute;\r\n  z-index: 0;\r\n`;\r\n\r\nexport const Text = styled.h1`\r\n  text-shadow: 1px 1px 5px white;\r\n  text-align: center;\r\n  z-index: 1;\r\n  position: absolute;\r\n  margin-top: 1.68em;\r\n  width: 10em;\r\n  font-size: 1.8em;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  margin-top: 20em;\r\n`;\r\n","import banner from \"src/assets/banner.png\";\nimport { useEthereum } from \"src/hooks\";\nimport { BlocksList, Spinner } from \"./components\";\nimport { Container, HeaderContainer, Image, Text, Body } from \"./styles\";\n\nconst App = () => {\n  const { latestBlocks } = useEthereum();\n\n  return (\n    <Container>\n      <HeaderContainer>\n        <Image src={banner} />\n        <Text>Eth Explorer</Text>\n      </HeaderContainer>\n      <Body>\n        {latestBlocks.length ? (\n          <BlocksList blocks={latestBlocks} />\n        ) : (\n          <Spinner />\n        )}\n      </Body>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { positions, Provider as AlertProvider } from \"react-alert\";\n// @ts-ignore\nimport AlertTemplate from \"react-alert-template-oldschool-dark\";\nimport { EthereumContextProvider } from \"src/contexts\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst alertOptions = {\n  timeout: 10000,\n  position: positions.BOTTOM_CENTER,\n};\n\nrender(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...alertOptions}>\n      <EthereumContextProvider>\n        <App />\n      </EthereumContextProvider>\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}