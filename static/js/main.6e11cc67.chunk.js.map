{"version":3,"sources":["components/BlocksList/styles.ts","components/BlocksList/index.tsx","utils/index.ts","components/Block/styles.ts","components/Block/index.tsx","components/TransactionsList/styles.ts","components/TransactionsList/index.tsx","components/Transaction/styles.ts","components/Transaction/index.tsx","components/TransactionModal/styles.tsx","components/TransactionModal/index.tsx","assets/copy.svg","components/Field/index.tsx","components/Button/index.ts","components/Spinner/styles.ts","components/Spinner/index.tsx","App.tsx","constants/index.ts","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","BlocksList","blocks","userAddress","map","block","hash","getBigNumber","value","ethers","utils","formatEther","Expanded","Collapsed","ExpandButtonContainer","ExpandButton","Label","h3","Input","input","CheckboxContainer","Block","useState","expanded","setExpanded","onlyOwnTransactions","setOnlyOwnTransactions","transactionsSendingETH","transactions","filter","transaction","Number","ownTransactions","from","to","text","String","number","timestamp","type","onClick","defaultChecked","TransactionsList","Transaction","modalOpen","setModalOpen","toggleModal","isOpen","onClose","Background","CloseButton","TransactionModal","blockNumber","Field","inputRef","useRef","FieldContainer","FieldBase","readOnly","ref","Button","refEl","select","document","execCommand","error","console","copyToClipboard","current","Icon","src","copyIcon","img","button","borderRadius","disabled","theme","toggleBorder","background","spin","keyframes","Loader","inner","innest","Spinner","App","latestBlocks","setLatestBlocks","provider","setProvider","setUserAddress","getLatestBlocks","useCallback","a","getBlockNumber","latestBlockNumber","currentBlock","length","getBlockWithTransactions","newBlock","push","log","subscribeToNewBlocks","on","includes","slice","connectWithProvider","window","ethereum","providers","WebSocketProvider","connectWallet","request","method","accounts","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e11cc67.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { BlockWithTransactions } from \"@ethersproject/abstract-provider\";\r\nimport { Container } from \"./styles\";\r\nimport { Block } from \"src/components\";\r\n\r\ninterface BlocksListProps {\r\n  blocks: BlockWithTransactions[];\r\n  userAddress: string;\r\n}\r\n\r\nexport const BlocksList: FunctionComponent<BlocksListProps> = ({\r\n  blocks,\r\n  userAddress,\r\n}) => (\r\n  <Container>\r\n    {blocks.map((block) => (\r\n      <Block key={block.hash} block={block} userAddress={userAddress} />\r\n    ))}\r\n  </Container>\r\n);\r\n","import { ethers } from \"ethers\";\r\n\r\nexport const getBigNumber = (value: ethers.BigNumber) =>\r\n  ethers.utils.formatEther(value);\r\n\r\nexport const copyToClipboard = (refEl: HTMLInputElement | null): void => {\r\n  try {\r\n    refEl?.select();\r\n    document.execCommand(\"copy\");\r\n  } catch (error) {\r\n    console.error({ error });\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 1em;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  width: 70vw;\r\n  margin: 1em 0;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const Expanded = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  padding: 1em;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n`;\r\n\r\nexport const Collapsed = styled.div`\r\n  padding: 1em;\r\n  transition: 0.5s;\r\n`;\r\n\r\nexport const ExpandButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  height: 3.5em;\r\n`;\r\n\r\nexport const ExpandButton = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 1.5em;\r\n  padding: 1em;\r\n  cursor: pointer;\r\n  display: flex;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n`;\r\n\r\nexport const Label = styled.h3``;\r\n\r\nexport const Field = styled.div``;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const CheckboxContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1em;\r\n`;\r\n","import { FunctionComponent, useState } from \"react\";\r\nimport { BlockWithTransactions } from \"@ethersproject/abstract-provider\";\r\nimport { TransactionsList, Field } from \"src/components\";\r\nimport { getBigNumber } from \"src/utils\";\r\nimport {\r\n  Collapsed,\r\n  Container,\r\n  Expanded,\r\n  Label,\r\n  ExpandButtonContainer,\r\n  ExpandButton,\r\n  Input,\r\n  CheckboxContainer,\r\n} from \"./styles\";\r\n\r\ninterface BlockProps {\r\n  block: BlockWithTransactions;\r\n  userAddress: string;\r\n}\r\n\r\nexport const Block: FunctionComponent<BlockProps> = ({\r\n  block,\r\n  userAddress,\r\n}) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const [onlyOwnTransactions, setOnlyOwnTransactions] =\r\n    useState<boolean>(false);\r\n\r\n  const toggle = () => setExpanded(!expanded);\r\n\r\n  const transactionsSendingETH = block.transactions.filter(\r\n    (transaction) => Number(getBigNumber(transaction.value)) !== 0\r\n  );\r\n\r\n  const ownTransactions = transactionsSendingETH.filter(\r\n    (transaction) =>\r\n      transaction.from === userAddress || transaction.to === userAddress\r\n  );\r\n\r\n  const toggleOwnTransactions = () =>\r\n    setOnlyOwnTransactions(!onlyOwnTransactions);\r\n\r\n  return (\r\n    <Container>\r\n      {expanded ? (\r\n        <Expanded>\r\n          <Label>Hash:</Label>\r\n          <Field text={block.hash}/>\r\n          <Label>Number:</Label>\r\n          <Field text={String(block.number)}/>\r\n          <Label>Timestamp:</Label>\r\n          <Field text={String(block.timestamp)}/>\r\n          <CheckboxContainer>\r\n            <Label>Only transactions from/to me?</Label>\r\n            <Input\r\n              type=\"checkbox\"\r\n              onClick={toggleOwnTransactions}\r\n              defaultChecked={onlyOwnTransactions}\r\n            />\r\n          </CheckboxContainer>\r\n          <TransactionsList\r\n            transactions={\r\n              onlyOwnTransactions ? ownTransactions : transactionsSendingETH\r\n            }\r\n          />\r\n        </Expanded>\r\n      ) : (\r\n        <Collapsed>{block.hash}</Collapsed>\r\n      )}\r\n\r\n      <ExpandButtonContainer>\r\n        <ExpandButton onClick={toggle}>{expanded ? \"↑\" : \"↓\"}</ExpandButton>\r\n      </ExpandButtonContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div``;\r\n","import { FunctionComponent } from \"react\";\r\nimport { TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { Container } from \"./styles\";\r\nimport { Transaction } from \"src/components\";\r\n\r\ninterface TransactionsListProps {\r\n  transactions: TransactionResponse[];\r\n}\r\n\r\nexport const TransactionsList: FunctionComponent<TransactionsListProps> = ({\r\n  transactions,\r\n}) => (\r\n  <Container>\r\n    <h3>Transactions:</h3>\r\n          <h5>(only sending ETH)</h5>\r\n    {transactions.map((transaction) => (\r\n      <Transaction key={transaction.hash} transaction={transaction} />\r\n    ))}\r\n  </Container>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 1em 0;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n  transition: 0.5s;\r\n\r\n  &:hover {\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n  }\r\n`;\r\n","import { FunctionComponent, useState } from \"react\";\r\nimport { TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { TransactionModal } from \"src/components\";\r\nimport { Container } from \"./styles\";\r\n\r\ninterface TransactionProps {\r\n  transaction: TransactionResponse;\r\n}\r\n\r\nexport const Transaction: FunctionComponent<TransactionProps> = ({\r\n  transaction,\r\n}) => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n\r\n  const toggleModal = () => setModalOpen(!modalOpen);\r\n\r\n  return (\r\n    <>\r\n      <Container onClick={toggleModal}>{transaction.hash}</Container>\r\n      <TransactionModal\r\n        isOpen={modalOpen}\r\n        onClose={toggleModal}\r\n        transaction={transaction}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ninterface BackgroundProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nexport const Background = styled.div<BackgroundProps>`\r\n  background: rgba(0, 0, 0, 0.86);\r\n  position: fixed;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 90;\r\n  display: ${({ isOpen }) => (isOpen ? \"flex\" : \"none\")};\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #282c34;\r\n  color: white;\r\n  border-radius: 10px;\r\n  width: 80%;\r\n  max-width: 500px;\r\n  padding: 1em 1.4em;\r\n`;\r\n\r\nexport const CloseButton = styled.div`\r\n  align-self: flex-end;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nexport const Transaction = styled.div`\r\n  padding: 1em;\r\n`;\r\n\r\nexport const Label = styled.h3``;\r\n","import { FunctionComponent } from \"react\";\r\nimport { TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { Field } from \"src/components\";\r\nimport { getBigNumber } from \"src/utils\";\r\nimport {\r\n  Background,\r\n  CloseButton,\r\n  Container,\r\n  Transaction,\r\n  Label,\r\n} from \"./styles\";\r\n\r\ninterface TransactionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  transaction: TransactionResponse;\r\n}\r\n\r\nexport const TransactionModal: FunctionComponent<TransactionModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  transaction,\r\n}) => {\r\n  return (\r\n    <Background isOpen={isOpen}>\r\n      <Container>\r\n        <CloseButton onClick={onClose}>x</CloseButton>\r\n        <Transaction>\r\n          <Label>Hash:</Label>\r\n          <Field text={transaction.hash} />\r\n          <Label>Block Number:</Label>\r\n          <Field text={String(transaction.blockNumber)} />\r\n          <Label>From:</Label>\r\n          <Field text={transaction.from} />\r\n          {transaction.to && (\r\n            <>\r\n              {\" \"}\r\n              <Label>To:</Label>\r\n              <Field text={transaction.to} />\r\n            </>\r\n          )}\r\n          <Label>ETH Sent:</Label>\r\n          <Field text={getBigNumber(transaction.value)} />\r\n        </Transaction>\r\n      </Container>\r\n    </Background>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/copy.0683a556.svg\";","import { FunctionComponent, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"src/components\";\r\nimport { copyToClipboard } from \"src/utils\";\r\nimport copyIcon from \"src/assets/copy.svg\";\r\n\r\ninterface FieldProps {\r\n  text: string;\r\n}\r\n\r\nexport const Field: FunctionComponent<FieldProps> = ({ text }) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleCopyToClipboard = () => copyToClipboard(inputRef.current);\r\n\r\n  return (\r\n    <FieldContainer>\r\n      <FieldBase readOnly ref={inputRef} value={text} />\r\n      <Button onClick={handleCopyToClipboard}>\r\n        <Icon src={copyIcon} />\r\n      </Button>\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport const FieldContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  gap: 1em;\r\n  border: 1px solid white;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const FieldBase = styled.input`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  background: transparent;\r\n  border: none;\r\n  color: white;\r\n  width: 80%;\r\n\r\n  &:focus {\r\n    text-decoration: none;\r\n    outline: none;\r\n    cursor: auto;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.img`\r\n  width: 1em;\r\n  height: 1em;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  borderRadius?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border-radius: ${({ borderRadius }) => borderRadius ?? \"5px\"};\r\n  padding: 0.4em;\r\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\r\n  transition: 0.6s;\r\n  text-align: center;\r\n  justify-content: center;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  background: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 1em 0;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    color: white;\r\n    transform: scale(1.01);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 8x solid lightBlue;\r\n  border-top: 8px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"40px\" : innest ? \"10px\" : \"65px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"33px\" : innest ? \"7px\" : \"60px\"};\r\n  animation: ${spin} 1.5s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Loader } from \"./styles\";\r\n\r\nexport const Spinner: FunctionComponent = () => (\r\n  <Loader>\r\n    <Loader inner>\r\n      <Loader innest />\r\n    </Loader>\r\n  </Loader>\r\n);\r\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { BlockWithTransactions } from \"@ethersproject/abstract-provider\";\nimport styled from \"styled-components\";\nimport { BlocksList, Spinner } from \"./components\";\nimport {\n  INFURA_WEBSOCKETS_URL,\n  INFURA_PROJECT_ID,\n  INFURA_NETWORK,\n} from \"./constants\";\n\ntype WebSocketProvider = ethers.providers.WebSocketProvider;\n\nconst App = () => {\n  const [latestBlocks, setLatestBlocks] = useState<BlockWithTransactions[]>([]);\n  const [provider, setProvider] = useState<WebSocketProvider | null>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n\n  const getLatestBlocks = useCallback(async () => {\n    try {\n      if (provider) {\n        const latestBlockNumber = await provider.getBlockNumber();\n\n        const blocks = [];\n\n        for (\n          let currentBlock = latestBlockNumber;\n          blocks.length < 10;\n          currentBlock--\n        ) {\n          const newBlock = await provider.getBlockWithTransactions(\n            currentBlock\n          );\n\n          blocks.push(newBlock);\n        }\n\n        setLatestBlocks(blocks);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [provider]);\n\n  const subscribeToNewBlocks = useCallback(async () => {\n    if (provider && latestBlocks.length) {\n      provider.on(\"block\", async (blockNumber) => {\n        const newBlock = await provider.getBlockWithTransactions(blockNumber);\n\n        // Update the blocks leaving in first place the new block, followed by the rest of pre-existing blocks and removing the oldest one.\n        setLatestBlocks((blocks) => {\n          // I've been testing for a while and there seems to be an issue with this subscription, from time to time it receives\n          // an event for the same block twice, duplicating the block in the list.\n          // Usually I'd have this validation outside of the setState, but if I used directly latestBlocks (outside of setLatestBlocks) I'd have to include\n          // it as dependency of the useCallback, causing subscribeToNewBlocks to be re-created and re-run in its useEffect every time a new block is added.\n          const existingNumbers = blocks.map((block) => block.number);\n\n          if (!existingNumbers.includes(blockNumber))\n            return [newBlock, ...blocks.slice(0, -1)];\n          else return [...blocks];\n        });\n      });\n    }\n  }, [provider, latestBlocks.length]);\n\n  const connectWithProvider = useCallback(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      setProvider(\n        new ethers.providers.WebSocketProvider(\n          `${INFURA_WEBSOCKETS_URL}${INFURA_PROJECT_ID}`,\n          INFURA_NETWORK\n        )\n      );\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  }, []);\n\n  const connectWallet = useCallback(async () => {\n    try {\n      const { ethereum } = window;\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      setUserAddress(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  useEffect(() => {\n    connectWallet();\n  }, [connectWallet]);\n\n  useEffect(() => {\n    connectWithProvider();\n  }, [connectWithProvider]);\n\n  // Fetch the initial 10 blocks, only if there's already a provider connected (verified internally)\n  useEffect(() => {\n    getLatestBlocks();\n  }, [getLatestBlocks]);\n\n  // Listen to new blocks, to update the list each time a new block is mined\n  useEffect(() => {\n    subscribeToNewBlocks();\n  }, [subscribeToNewBlocks]);\n\n  return (\n    <Container>\n      {latestBlocks.length ? (\n        <BlocksList blocks={latestBlocks} userAddress={userAddress} />\n      ) : (\n        <Spinner />\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","export const INFURA_WEBSOCKETS_URL = \"wss://mainnet.infura.io/ws/v3/\";\r\nexport const INFURA_PROJECT_ID = \"ed948b163f0842cf86b3e1908a05f376\";\r\nexport const INFURA_NETWORK = \"mainnet\";\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}